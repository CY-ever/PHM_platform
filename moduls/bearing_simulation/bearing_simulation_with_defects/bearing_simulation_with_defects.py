# Generated with SMOP  0.41
# bearing_simulation_with_defects.m


## this script was designed to simulate the bearing with defects based on Runge-Kutta and 5-DoF bearing dynamics model
# author: Diwang Ruan
# version: V1.0
# date: 2020.09.14

## version modification infos:
# version: V2.0
# reviser:  Diwang Ruan
# date: 2020.09.30
# revision points:
# to add an input interface for user to define the name of output files and figures
# to change the output file format from mat to excel;
# to correct the error of theta calculation and relative angular position under different defect type

# version: V3.0
# reviser: Diwang Ruan
# date: 2021.08.31
# revision points:
# 1) simplifying the fault depth calculation with fault shape ignored;
# 2) the defect_shape.m is not used in this version, instead, the
#    fault depth is modeled as constant, see line 82 and 101 in bearing_defect_model.m;
# 3) the error of the output selection from Runge_Kutta_solver.m is
#    fixed, see line 36-39;
# 4) reducing the absolute_tolerance, relative_tolerance and max_step
#    to raise the solution accuracy of ode45;
# 5) modifying the arrangement of output plot, with only acc_x displayed;


## there are mainly 6 functions:
# Runge_Kutta_solver: to solve bearing dynamics model by ode45
# bearing_dynamics_model: the 5 DoF bearing dynamics model
# bearing_defect_model: to calculate the depth generated by defect
# defect_shape: to model the defect shape with different functions
# ball_defect: to calculate the defect depth generated by ball defect
# result_analysis_plot: for results presentation and analysis

## input for the model includes 4 parts: basic parameters, defect parameters, 5DoF model parameters, simulation parameters.
# the default parameters are from paper" Ball bearing defect models: a study of simulated and experimental fault signatures"

import numpy as np
import matplotlib as plt
from moduls.bearing_simulation.bearing_simulation_with_defects.Runge_Kutta_solver import Runge_Kutta_solver
from flask import abort
from moduls.bearing_simulation.signal_segmentaion import signal_segmentaion
from moduls.bearing_simulation.bearing_simulation_with_defects.excel_generation import excel_generation
from moduls.bearing_simulation.Report_SCR import *
from utils.save_data import data_save_for_2


# from Report_SCR import *


## parameters for normal bearing model
# parameters of the ball
class BearingParameter:
    """
    :param

    """

    # bearing_parameter = ('Kb', [], 'd', [], 'Dm', [], 'nb', [], 'Di', [], 'Do', [], 'contact_angle', [])

    Kb = np.dot(1.89, 10000000000.0)
    d = np.dot(7.94, 0.001)
    Nb = 9
    Di = np.dot(35.35, 10 ** - 3)
    Do = np.dot(43.29, 10 ** - 3)
    Dm = np.dot(Di, Do) / 2
    contact_angle = 0


# parameters of the pedestal
class PedestalParameter:
    """
    :param
    """
    # pedestal_parameter = ('Mp', [], 'Kp', [], 'Cp', [])

    Mp = 6.638
    Kp = np.dot(1.51, 10000000.0)
    Cp = 2210.7


# parameters of the shaft
class ShaftParameter:
    """
    :param
    """

    # shaft_parameter = ('Ms', [], 'Ks', [], 'Cs', [])

    Ms = 3.2638
    Ks = 7.42 * 10000000.0
    Cs = 1376.8


# parameters of the sprung mass system
class SprungParameter:
    """
    :param
    """
    # sprung_parameter = ('Mr', [], 'Kr', [], 'Cr', [])

    Mr = 1
    Kr = np.dot(8.8826, 10000000.0)
    Cr = 9424.8


# parameters to define the working conditon
class ConditionParameter:
    """
    :param
    """
    # condition_parameter = ('g', [], 'Fr', [], 'Fa', [], 'omega_shaft', [])

    g = 9.8
    # Fr = 30000
    Fr = 90000
    Fa = 0
    omega_shaft = 1730 / 60


## parameters for defect definition is a structure as following:
class DefectParameter:
    """
    :param
    """
    # defect_parameter = ('outer_ring_switch', [], 'outer_ring_number', [], 'outer_ring_local_position', [],
    #                     'outer_ring_size', [], 'inner_ring_switch', [], 'inner_ring_number', [],
    #                     'inner_ring_local_position', [], 'inner_ring_size', [], 'ball_switch', [], 'ball_number', [],
    #                     'ball_fault_ball_identifier', [], 'ball_local_position', [], 'ball_size', [])

    L = 0.0009
    B = 0.0009
    H = 0.0006

    outer_ring_switch = 1
    outer_ring_number = 1

    outer_ring_local_position = (20,)
    outer_ring_size = [L, B, H]

    inner_ring_switch = 0
    inner_ring_number = 0

    inner_ring_local_position = (0,)
    inner_ring_size = [L, B, H]

    ball_switch = 0
    ball_number = 0
    # ball_fault_ball_identifier = [3]
    ball_fault_ball_identifier = (3,)
    ball_local_position = (15,)
    ball_size = [L, B, H]


## parameters special for the 5-DoF bearing model
class DoF5Parameter:
    """
    :param
    """
    # DoF5_parameter = ('mutation_percentage', [], 'initial_angular_position', [])

    mutation_percentage = 0
    initial_angular_position = 0


## parameters to determine the simulation
class SimParameter:
    """
    :param
    """
    # sim_parameter = ('sim_duration', [], 'step_size', [], 'max_step', [], 'absolute_tolerance', [],
    #                  'relative_tolerance', [])

    sim_duration = 1
    step_size = 1 / (10 * 1000)
    max_step = 1e-05
    absolute_tolerance = 1e-08
    relative_tolerance = 1e-06

    ## parameters for user-defined output name


class NameParameter:
    """
    :param
    """
    # name_parameter = ('excel_name', [], 'figure_name', [])

    excel_name = 'x and y axis acceleration'
    figure_name = 'time and frequency domain acceleration'


def bearing_main(Kb=18900000, d=7.94, Nb=9,
                 Di=35.35, Do=43.29, contact_angle=0,
                 Mp=6.638, Kp=15100000, Cp=2210.7, Ms=3.2638, Ks=74200000,
                 Cs=1376.8, Mr=1, Kr=88826000, Cr=9424.8,
                 Fr=30000, Fa=0, omega_shaft=28.83,
                 L=0.5, B=0.5, H=0.3,
                 outer_ring_switch=1, outer_ring_number=1, outer_ring_local_position=(20,),
                 inner_ring_switch=0, inner_ring_number=0,
                 inner_ring_local_position=(20,),
                 ball_switch=0, ball_number=0, ball_fault_ball_identifier=(1,), ball_local_position=(15,),
                 mutation_percentage=0, initial_angular_position=0,
                 sim_duration=0.5, step_size=0.0001,
                 save_path="", output_image=0, output_file=0,
                 segmentation_phy=0,
                 length=4000, shift=500
                 ):
    """
    :param Kb: stiffness of ball, N/m
    :param d: ball diameter, m
    :param Dm: pitch diameter, m
    :param Nb: number of balls
    :param Di: diameter of inner ring, m
    :param Do: diameter of outer ring, m
    :param contact_angle: deg
    :param Mp: mass of pedestal, kg
    :param Kp: stiffness of pedestal, N/m
    :param Cp: damping of pedestal, Ns/m
    :param Ms: mass of shaft, kg
    :param Ks: stiffness of shaft, N/m
    :param Cs: damping of shaft, Ns/m
    :param Mr: mass of sprung mass system, kg
    :param Kr: stiffness of sprung mass system, N/m
    :param Cr: damping of sprung mass system, Ns/m
    :param g: gravitational acceleration, m/s^2
    :param Fr: radial external force, N
    :param Fa: axial external force, N
    :param omega_shaft: the speed of shaft, Hz
    :param L: length of the defect, m
    :param B: width of the defect, m
    :param H: height of the defect, m
    :param outer_ring_switch: enable switch to simulate outer ring defect, 0-disable, 1-enable;
    :param outer_ring_number: the number of outer ring defects to simulate, integers>=1;
    :param outer_ring_local_position: local angular position arrays for outer ring defects,eg: [20,40,60] stands for three defects at 20deg,40deg and 60deg respectively;
    :param inner_ring_switch: enable switch to simulate inner ring defect, 0-disable, 1-enable
    :param inner_ring_number: the number of inner ring defects to simulate, integers>=1;
    :param inner_ring_local_position: local angular position arrays for inner ring defects,eg: [20,40,60] stands for three defects at 20deg,40deg and 60deg respectively;
    :param ball_switch: enable switch to simulate ball defect, 0-disable, 1-enable;
    :param ball_number: the number of ball defects to simulate, integers>=1;
    :param ball_fault_ball_identifier: the flag number of fault ball,  1<=i<=Nb;
    :param ball_local_position: local angular position arrays for ball defects,eg: [20,40,60] stands for three defects at 20deg,40deg and 60deg respectively;
    :param mutation_percentage: sliding percentage, 0.01-0.02 rad;
    :param initial_angular_position: initial angular position of cage, rad
    :param sim_duration: simulation duration, s
    :param step_size:

    """
    # 报错
    if outer_ring_switch == 1 and outer_ring_number != len(outer_ring_local_position):
        abort(400, "ERROR: The number of defect position must equal to the number of defect！")

    if inner_ring_switch == 1 and inner_ring_number != len(inner_ring_local_position):
        abort(400, "ERROR: The number of defect position must equal to the number of defect！")

    if ball_switch == 1 and ball_number != len(ball_local_position):
        abort(400, "ERROR: The number of defect position must equal to the number of defect！")

    if ball_switch == 1 and ball_number != len(ball_fault_ball_identifier):
        abort(400, "ERROR: The number of fault ball numbers must be consistent with the number of fault balls")

    if d < 1 or d > 440:
        abort(400, "ERROR: The allowable range of D value is between 1 and 440 millimeters!!!")

    if Di < 1 or Di > 2000:
        abort(400, "ERROR: The allowable range of Di value is between 1 and 2000 millimeters!!!")

    if Do < 1 or Do > 2500:
        abort(400, "ERROR: The allowable range of Do value is between 1 and 2500 millimeters!!!")

    if Nb < 8 or Nb > 30:
        abort(400, "ERROR: The range of Nb value is abnormal!!!")

    if contact_angle < 0 or contact_angle > 60:
        abort(400, "ERROR: The range of α value is abnormal!!!")

    if Mp < 0:
        abort(400, "ERROR: The value of Mp must be greater than 0!!!")
    if Kp < 0:
        abort(400, "ERROR: The value of Kp must be greater than 0!!!")
    if Cp < 0:
        abort(400, "ERROR: The value of Cp must be greater than 0!!!")
    if Ms < 0:
        abort(400, "ERROR: The value of Ms must be greater than 0!!!")
    if Ks < 0:
        abort(400, "ERROR: The value of Ks must be greater than 0!!!")
    if Cs < 0:
        abort(400, "ERROR: The value of Cs must be greater than 0!!!")
    if Mr < 0:
        abort(400, "ERROR: The value of Mr must be greater than 0!!!")
    if Kr < 0:
        abort(400, "ERROR: The value of Kr must be greater than 0!!!")
    if Cr < 0:
        abort(400, "ERROR: The value of Cr must be greater than 0!!!")

    if Fr < 0:
        abort(400, "ERROR: The value of Fr must be greater than 0!!!")
    if Fa < 0:
        abort(400, "ERROR: The value of Fa must be greater than 0!!!")
    if omega_shaft < 0:
        abort(400, "ERROR: The value of ω shaft must be greater than 0!!!")

    if L < 0 or L > 40:
        abort(400, "ERROR: The range of L value is abnormal!!!")
    if B < 0 or B > 40:
        abort(400, "ERROR: The range of B value is abnormal!!!")
    if H < 0 or H > 40:
        abort(400, "ERROR: The range of H value is abnormal!!!")

    if outer_ring_switch != 1 and outer_ring_switch != 0:
        abort(400, "ERROR: Only 0 or 1 is allowed by switch!!!")
    if inner_ring_switch != 1 and inner_ring_switch != 0:
        abort(400, "ERROR: Only 0 or 1 is allowed by switch!!!")
    if ball_switch != 1 and ball_switch != 0:
        abort(400, "ERROR: Only 0 or 1 is allowed by switch!!!")
    if outer_ring_number < 0:
        abort(400, "ERROR: The value of Number must be greater than 0!!!")
    if inner_ring_number < 0:
        abort(400, "ERROR: The value of Number must be greater than 0!!!")
    if ball_number < 0:
        abort(400, "ERROR: The value of Number must be greater than 0!!!")

    if initial_angular_position < 0:
        abort(400, "ERROR: The value of Initial angular position must be greater than 0!!!")
    if mutation_percentage < 0 or mutation_percentage > 1:
        abort(400, "ERROR: The normally range of Mutation percentage value is (0,0.02)!!!")

    if step_size < 0 or step_size > 1:
        abort(400, "ERROR: The allowable range of Step size value is between 0 and 1!!!")
    if sim_duration < 0:
        abort(400, "ERROR: The value of Duration must be greater than 0!!!")

    bearing_parameter = BearingParameter()
    bearing_parameter.Kb = Kb * 1000
    bearing_parameter.d = d / 1000
    bearing_parameter.Nb = Nb
    bearing_parameter.Di = Di / 1000
    bearing_parameter.Do = Do / 1000
    bearing_parameter.Dm = (Do + Di) / 2000
    bearing_parameter.contact_angle = contact_angle

    pedestal_parameter = PedestalParameter()
    pedestal_parameter.Mp = Mp
    pedestal_parameter.Kp = Kp
    pedestal_parameter.Cp = Cp

    shaft_parameter = ShaftParameter()
    shaft_parameter.Ms = Ms
    shaft_parameter.Ks = Ks
    shaft_parameter.Cs = Cs

    sprung_parameter = SprungParameter()
    sprung_parameter.Mr = Mr
    sprung_parameter.Kr = Kr
    sprung_parameter.Cr = Cr

    condition_parameter = ConditionParameter()
    # condition_parameter.g = g
    condition_parameter.Fr = Fr
    condition_parameter.Fa = Fa
    condition_parameter.omega_shaft = omega_shaft

    defect_parameter = DefectParameter()
    defect_parameter.L = L / 1000
    defect_parameter.B = B / 1000
    defect_parameter.H = H / 1000
    defect_parameter.outer_ring_switch = outer_ring_switch
    defect_parameter.outer_ring_number = outer_ring_number
    defect_parameter.outer_ring_local_position = np.array([outer_ring_local_position])
    # defect_parameter.outer_ring_local_position = outer_ring_local_position

    defect_parameter.outer_ring_size = [L / 1000, B / 1000, H / 1000]
    defect_parameter.inner_ring_switch = inner_ring_switch
    defect_parameter.inner_ring_number = inner_ring_number
    defect_parameter.inner_ring_local_position = np.array([inner_ring_local_position])
    # defect_parameter.inner_ring_local_position = inner_ring_local_position

    defect_parameter.inner_ring_size = [L / 1000, B / 1000, H / 1000]
    defect_parameter.ball_switch = ball_switch
    defect_parameter.ball_number = ball_number
    defect_parameter.ball_fault_ball_identifier = np.array([ball_fault_ball_identifier])
    defect_parameter.ball_local_position = np.array([ball_local_position])
    defect_parameter.ball_size = [L / 1000, B / 1000, H / 1000]

    DoF5_parameter = DoF5Parameter()
    DoF5_parameter.mutation_percentage = mutation_percentage
    DoF5_parameter.initial_angular_position = initial_angular_position

    sim_parameter = SimParameter()
    sim_parameter.sim_duration = sim_duration
    sim_parameter.step_size = step_size

    name_parameter = NameParameter()
    name_parameter.excel_name = 'x and y axis acceleration'
    name_parameter.figure_name = 'time and frequency domain acceleration'

    ## demostration on calling "Runge_Kutta_solver"
    time, acc_x, acc_y = Runge_Kutta_solver(bearing_parameter, pedestal_parameter, shaft_parameter, sprung_parameter,
                                            condition_parameter, defect_parameter, DoF5_parameter, sim_parameter,
                                            name_parameter, nargout=3,
                                            save_path=save_path, output_image=output_image,
                                            output_file=output_file)

    # return time, acc_x, acc_y
    print("物理模型数据形状:", acc_x.shape)

    label = np.zeros(shape=(1,), dtype=np.int)
    if outer_ring_switch:
        label = label + 0
    if inner_ring_switch:
        label = label + 1
    if ball_switch:
        label = label + 2

    print("label", label)

    if segmentation_phy:
        acc_x = np.reshape(acc_x, (1, -1))
        acc_x = signal_segmentaion(acc_x, length, shift)
        N = acc_x.shape[0]
        label = label * np.ones(N, dtype=int)
        label = np.reshape(label, (N, 1))
        print("seg_label", label)

    return acc_x, label


# 测试-只生成单个故障类型多数据
def bearing_one_main(
        Kb=18900000, d=7.94, Nb=9,
        Di=35.35, Do=43.29, contact_angle=0,
        Mp=6.638, Kp=15100000, Cp=2210.7, Ms=3.2638, Ks=74200000,
        Cs=1376.8, Mr=1, Kr=88826000, Cr=9424.8,
        Fr=30000, Fa=0, omega_shaft=28.83,
        L=0.5, B=0.5, H=0.3,
        outer_ring_switch=1, outer_ring_number=1, outer_ring_local_position=(20,),
        inner_ring_switch=0, inner_ring_number=1,
        inner_ring_local_position=(20,),
        ball_switch=1, ball_number=1, ball_fault_ball_identifier=(1,), ball_local_position=(15,),
        mutation_percentage=0, initial_angular_position=0,
        sim_duration=0.5, step_size=0.0001,
        save_path="", output_image=0, output_file=0,
        segmentation_phy=1,
        length=4000, shift=500
):
    defect_type_list = []

    if outer_ring_switch:
        defect_type_list.append(0)
    if inner_ring_switch:
        defect_type_list.append(1)
    if ball_switch:
        defect_type_list.append(2)

    all_data = None
    all_label = None

    for defect_type in defect_type_list:
        if defect_type == 0:
            time_data, label = bearing_main(Kb=Kb, d=d, Nb=Nb,
                                            Di=Di, Do=Do, contact_angle=contact_angle,
                                            Mp=Mp, Kp=Kp, Cp=Cp, Ms=Ms, Ks=Ks,
                                            Cs=Cs, Mr=Mr, Kr=Kr, Cr=Cr,
                                            Fr=Fr, Fa=Fa, omega_shaft=omega_shaft,
                                            L=L, B=B, H=H,
                                            outer_ring_switch=outer_ring_switch, outer_ring_number=outer_ring_number,
                                            outer_ring_local_position=outer_ring_local_position,
                                            inner_ring_switch=0, inner_ring_number=0,
                                            inner_ring_local_position=inner_ring_local_position,
                                            ball_switch=0, ball_number=0,
                                            ball_fault_ball_identifier=ball_fault_ball_identifier,
                                            ball_local_position=ball_local_position,
                                            mutation_percentage=mutation_percentage,
                                            initial_angular_position=initial_angular_position,
                                            sim_duration=sim_duration, step_size=step_size,
                                            save_path=save_path, output_image=output_image, output_file=output_file,
                                            segmentation_phy=segmentation_phy,
                                            length=length, shift=shift
                                            )

            # print("time data0:", time_data)

        if defect_type == 1:
            time_data, label = bearing_main(Kb=Kb, d=d, Nb=Nb,
                                            Di=Di, Do=Do, contact_angle=contact_angle,
                                            Mp=Mp, Kp=Kp, Cp=Cp, Ms=Ms, Ks=Ks,
                                            Cs=Cs, Mr=Mr, Kr=Kr, Cr=Cr,
                                            Fr=Fr, Fa=Fa, omega_shaft=omega_shaft,
                                            L=L, B=B, H=H,
                                            outer_ring_switch=0, outer_ring_number=0,
                                            outer_ring_local_position=outer_ring_local_position,
                                            inner_ring_switch=inner_ring_switch, inner_ring_number=inner_ring_number,
                                            inner_ring_local_position=inner_ring_local_position,
                                            ball_switch=0, ball_number=0,
                                            ball_fault_ball_identifier=ball_fault_ball_identifier,
                                            ball_local_position=ball_local_position,
                                            mutation_percentage=mutation_percentage,
                                            initial_angular_position=initial_angular_position,
                                            sim_duration=sim_duration, step_size=step_size,
                                            save_path=save_path, output_image=output_image, output_file=output_file,
                                            segmentation_phy=segmentation_phy,
                                            length=length, shift=shift
                                            )

            # print("time data1:", time_data)

        if defect_type == 2:
            time_data, label = bearing_main(Kb=Kb, d=d, Nb=Nb,
                                            Di=Di, Do=Do, contact_angle=contact_angle,
                                            Mp=Mp, Kp=Kp, Cp=Cp, Ms=Ms, Ks=Ks,
                                            Cs=Cs, Mr=Mr, Kr=Kr, Cr=Cr,
                                            Fr=Fr, Fa=Fa, omega_shaft=omega_shaft,
                                            L=L, B=B, H=H,
                                            outer_ring_switch=0, outer_ring_number=0,
                                            outer_ring_local_position=outer_ring_local_position,
                                            inner_ring_switch=0, inner_ring_number=0,
                                            inner_ring_local_position=inner_ring_local_position,
                                            ball_switch=ball_switch, ball_number=ball_number,
                                            ball_fault_ball_identifier=ball_fault_ball_identifier,
                                            ball_local_position=ball_local_position,
                                            mutation_percentage=mutation_percentage,
                                            initial_angular_position=initial_angular_position,
                                            sim_duration=sim_duration, step_size=step_size,
                                            save_path=save_path, output_image=output_image, output_file=output_file,
                                            segmentation_phy=segmentation_phy,
                                            length=length, shift=shift
                                            )

            # print("time data2:", time_data)

        if all_data is None:
            all_data = time_data
            all_label = label
        else:
            all_data = np.vstack((all_data, time_data))
            all_label = np.vstack((all_label, label))

        print("all_label", all_label.shape)
        # print("all_label", all_label)

        # label = label + defect_type
        # print("label", label)

    # excel_generation(all_data, output_file=output_file, save_path=save_path)

    data_save_for_2(all_data, all_label, output_file, save_path,
                    file_name="physical_based_bearing_defect_model",
                    file_name1="physical_based_bearing_defect_model_label",
                    index_label1="(sample_size, sample_length)")

    # 生成word文档
    word_physics(save_path=save_path,
                 D=d, Di=Di, Do=Do, Kb=Kb, Nb=Nb, α=contact_angle,
                 Ms=Ms, Mp=Mp, Mr=Mr, Ks=Ks, Kp=Kp, Kr=Kr, Cs=Cs, Cp=Cp, Cr=Cr,
                 outer_ring_switch=outer_ring_switch,
                 outer_ring_number=outer_ring_number,
                 outer_ring_local_position=outer_ring_local_position,
                 inner_ring_switch=inner_ring_switch,
                 inner_ring_number=inner_ring_number,
                 inner_ring_local_position=inner_ring_local_position,
                 ball_switch=ball_switch,
                 ball_number=ball_number,
                 ball_local_position=ball_local_position,
                 ball_fault_ball_identifier=ball_fault_ball_identifier,
                 L=L, B=B, H=H,
                 segmentation_phy=segmentation_phy, length=length, shift=shift,
                 Fr=Fr, Fa=Fa, omega_shaft=omega_shaft,
                 mutation_percentage=mutation_percentage, initial_angular_position=initial_angular_position,
                 sim_duration=sim_duration, step_size=step_size,
                 all_data=all_data,
                 output_file=output_file, output_image=output_image
                 )

    return all_data, all_label


# 测试功能
# def defect_modul1_main(Kb=18900000, d=7.94, Nb=9,
#                        Di=35.35, Do=43.29, contact_angle=0,
#                        Mp=6.638, Kp=15100000, Cp=2210.7, Ms=3.2638, Ks=74200000,
#                        Cs=1376.8, Mr=1, Kr=88826000, Cr=9424.8,
#                        Fr=30000, Fa=0, omega_shaft=28.83,
#                        L=0.5, B=0.5, H=0.3,
#                        outer_ring_switch=1, outer_ring_number=1, outer_ring_local_position=(20,),
#                        inner_ring_switch=0, inner_ring_number=0, inner_ring_local_position=(20,),
#                        ball_switch=0, ball_number=0, ball_fault_ball_identifier=(1,), ball_local_position=(15,),
#                        mutation_percentage=0, initial_angular_position=0,
#                        sim_duration=0.1, step_size=0.0001,
#                        save_path="", output_image=0, output_file=0):
#     all_data = []
#     all_label = []
#     # defect_type_list = [heathy_switch, outer_ring_switch, inner_ring_switch, ball_switch]
#     defect_type_list = [outer_ring_switch, inner_ring_switch, ball_switch]
#
#     for i in range(4):
#         if defect_type_list[0] and i == 0:
#             time_data = bearing_main(Kb=Kb, d=d, Nb=Nb, Di=Di, Do=Do, contact_angle=contact_angle,
#                                      Mp=Mp, Kp=Kp, Cp=Cp, Ms=Ms, Ks=Ks, Cs=Cs, Mr=Mr, Kr=Kr, Cr=Cr,
#                                      Fr=Fr, Fa=Fa, omega_shaft=omega_shaft,
#                                      L=L, B=B, H=H,
#                                      outer_ring_switch=outer_ring_switch,
#                                      outer_ring_number=outer_ring_number,
#                                      outer_ring_local_position=outer_ring_local_position,
#                                      inner_ring_switch=inner_ring_switch,
#                                      inner_ring_number=inner_ring_number,
#                                      inner_ring_local_position=inner_ring_local_position,
#                                      ball_switch=ball_switch,
#                                      ball_number=ball_number,
#                                      ball_fault_ball_identifier=ball_fault_ball_identifier,
#                                      ball_local_position=ball_local_position,
#                                      mutation_percentage=mutation_percentage,
#                                      initial_angular_position=initial_angular_position,
#                                      sim_duration=sim_duration, step_size=step_size,
#                                      output_file=output_file, save_path=save_path,
#                                      output_image=output_image)
#
#             label = np.array([0, ]).reshape((1, 1))
#             all_data.append(time_data)
#             all_label.append(label)
#
#         if defect_type_list[1] and i == 1:
#             time_data = bearing_main(Kb=Kb, d=d, Nb=Nb, Di=Di, Do=Do, contact_angle=contact_angle,
#                                      Mp=Mp, Kp=Kp, Cp=Cp, Ms=Ms, Ks=Ks, Cs=Cs, Mr=Mr, Kr=Kr, Cr=Cr,
#                                      Fr=Fr, Fa=Fa, omega_shaft=omega_shaft,
#                                      L=L, B=B, H=H,
#                                      outer_ring_switch=outer_ring_switch,
#                                      outer_ring_number=outer_ring_number,
#                                      outer_ring_local_position=outer_ring_local_position,
#                                      inner_ring_switch=inner_ring_switch,
#                                      inner_ring_number=inner_ring_number,
#                                      inner_ring_local_position=inner_ring_local_position,
#                                      ball_switch=ball_switch,
#                                      ball_number=ball_number,
#                                      ball_fault_ball_identifier=ball_fault_ball_identifier,
#                                      ball_local_position=ball_local_position,
#                                      mutation_percentage=mutation_percentage,
#                                      initial_angular_position=initial_angular_position,
#                                      sim_duration=sim_duration, step_size=step_size,
#                                      output_file=output_file, save_path=save_path,
#                                      output_image=output_image)
#             label = np.array([1, ]).reshape((1, 1))
#             all_data.append(time_data)
#             all_label.append(label)
#
#         if defect_type_list[2] and i == 2:
#             time_data = bearing_main(Kb=Kb, d=d, Nb=Nb, Di=Di, Do=Do, contact_angle=contact_angle,
#                                      Mp=Mp, Kp=Kp, Cp=Cp, Ms=Ms, Ks=Ks, Cs=Cs, Mr=Mr, Kr=Kr, Cr=Cr,
#                                      Fr=Fr, Fa=Fa, omega_shaft=omega_shaft,
#                                      L=L, B=B, H=H,
#                                      outer_ring_switch=outer_ring_switch,
#                                      outer_ring_number=outer_ring_number,
#                                      outer_ring_local_position=outer_ring_local_position,
#                                      inner_ring_switch=inner_ring_switch,
#                                      inner_ring_number=inner_ring_number,
#                                      inner_ring_local_position=inner_ring_local_position,
#                                      ball_switch=ball_switch,
#                                      ball_number=ball_number,
#                                      ball_fault_ball_identifier=ball_fault_ball_identifier,
#                                      ball_local_position=ball_local_position,
#                                      mutation_percentage=mutation_percentage,
#                                      initial_angular_position=initial_angular_position,
#                                      sim_duration=sim_duration, step_size=step_size,
#                                      output_file=output_file, save_path=save_path,
#                                      output_image=output_image)
#             label = np.array([2, ]).reshape((1, 1))
#             all_data.append(time_data)
#             all_label.append(label)
#
#         if defect_type_list[3] and i == 3:
#             time_data = bearing_main(Kb=Kb, d=d, Nb=Nb, Di=Di, Do=Do, contact_angle=contact_angle,
#                                      Mp=Mp, Kp=Kp, Cp=Cp, Ms=Ms, Ks=Ks, Cs=Cs, Mr=Mr, Kr=Kr, Cr=Cr,
#                                      Fr=Fr, Fa=Fa, omega_shaft=omega_shaft,
#                                      L=L, B=B, H=H,
#                                      outer_ring_switch=outer_ring_switch,
#                                      outer_ring_number=outer_ring_number,
#                                      outer_ring_local_position=outer_ring_local_position,
#                                      inner_ring_switch=inner_ring_switch,
#                                      inner_ring_number=inner_ring_number,
#                                      inner_ring_local_position=inner_ring_local_position,
#                                      ball_switch=ball_switch,
#                                      ball_number=ball_number,
#                                      ball_fault_ball_identifier=ball_fault_ball_identifier,
#                                      ball_local_position=ball_local_position,
#                                      mutation_percentage=mutation_percentage,
#                                      initial_angular_position=initial_angular_position,
#                                      sim_duration=sim_duration, step_size=step_size,
#                                      output_file=output_file, save_path=save_path,
#                                      output_image=output_image)
#             label = np.array([3, ]).reshape((1, 1))
#             all_data.append(time_data)
#             all_label.append(label)
#
#     all_data = np.array(all_data)
#     all_label = np.array(all_label)
#     all_label = all_label.astype(int)
#     print("数据切分生成数据形状为:", all_data.shape, all_label.shape)
#     return all_data, all_label


if __name__ == '__main__':
    all_data, all_label = bearing_one_main()
    print(all_data.shape)
